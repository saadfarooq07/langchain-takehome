name: Deploy to LangGraph Studio

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  pre-deployment-tests:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.test-results.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-asyncio
        
    - name: Run pre-deployment tests
      id: test-results
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      run: |
        # Run critical tests only for deployment
        if ./run_comprehensive_tests.py --suite unit --no-env-check; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
            exit 1
          fi
        fi

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    if: |
      (needs.pre-deployment-tests.outputs.tests-passed == 'true' || 
       github.event.inputs.force_deploy == 'true') &&
      (github.event.inputs.environment == 'staging' || 
       github.ref == 'refs/heads/main')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install langgraph-cli
        
    - name: Configure LangGraph CLI
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        LANGGRAPH_STUDIO_API_KEY: ${{ secrets.LANGGRAPH_STUDIO_API_KEY }}
      run: |
        # Configure LangGraph CLI
        langgraph config set-api-key $LANGSMITH_API_KEY
        
    - name: Validate graph configuration
      run: |
        # Validate langgraph.json
        langgraph validate
        
    - name: Deploy to staging
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        LANGGRAPH_STUDIO_API_KEY: ${{ secrets.LANGGRAPH_STUDIO_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      run: |
        # Deploy to LangGraph Studio staging
        langgraph deploy \
          --project-name "log-analyzer-agent" \
          --environment "staging" \
          --wait-for-deployment \
          --timeout 600
          
    - name: Run post-deployment tests
      env:
        STAGING_DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Test the deployed staging environment
        pytest tests/integration/test_langgraph_studio.py::TestLangGraphStudioIntegration::test_deployment_health_monitoring -v
        
    - name: Update deployment status
      if: always()
      run: |
        echo "Staging deployment completed"
        echo "Deployment URL: ${{ steps.deploy.outputs.deployment-url }}"

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, deploy-to-staging]
    if: |
      (needs.pre-deployment-tests.outputs.tests-passed == 'true' || 
       github.event.inputs.force_deploy == 'true') &&
      (github.event.inputs.environment == 'production' || 
       startsWith(github.ref, 'refs/tags/v'))
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install langgraph-cli
        
    - name: Configure LangGraph CLI
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        LANGGRAPH_STUDIO_API_KEY: ${{ secrets.LANGGRAPH_STUDIO_API_KEY }}
      run: |
        langgraph config set-api-key $LANGSMITH_API_KEY
        
    - name: Deploy to production
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        LANGGRAPH_STUDIO_API_KEY: ${{ secrets.LANGGRAPH_STUDIO_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      run: |
        # Deploy to LangGraph Studio production
        langgraph deploy \
          --project-name "log-analyzer-agent" \
          --environment "production" \
          --wait-for-deployment \
          --timeout 900 \
          --auto-scaling-config '{"min_instances": 2, "max_instances": 20}' \
          --health-check-path "/health"
          
    - name: Run production smoke tests
      env:
        PRODUCTION_DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Run smoke tests against production
        pytest tests/integration/test_langgraph_studio.py::TestLangGraphStudioIntegration::test_deployment_health_monitoring -v
        pytest tests/e2e/test_complete_workflows.py::TestCompleteE2EWorkflows::test_complete_log_analysis_workflow -v
        
    - name: Configure monitoring and alerts
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Set up monitoring and alerts for production
        langgraph monitoring configure \
          --deployment-id ${{ steps.deploy.outputs.deployment-id }} \
          --alert-email ${{ secrets.ALERT_EMAIL }} \
          --error-threshold 5 \
          --latency-threshold 5000
          
    - name: Update production status
      if: always()
      run: |
        echo "Production deployment completed"
        echo "Deployment URL: ${{ steps.deploy.outputs.deployment-url }}"
        echo "Deployment ID: ${{ steps.deploy.outputs.deployment-id }}"

  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: failure() && needs.deploy-to-production.result == 'failure'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install LangGraph CLI
      run: |
        pip install langgraph-cli
        
    - name: Configure LangGraph CLI
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        langgraph config set-api-key $LANGSMITH_API_KEY
        
    - name: Rollback production deployment
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Get previous stable deployment
        PREVIOUS_DEPLOYMENT=$(langgraph deployments list --project "log-analyzer-agent" --environment "production" --status "stable" --limit 1 --format json | jq -r '.[0].deployment_id')
        
        if [ "$PREVIOUS_DEPLOYMENT" != "null" ]; then
          echo "Rolling back to deployment: $PREVIOUS_DEPLOYMENT"
          langgraph rollback \
            --project-name "log-analyzer-agent" \
            --environment "production" \
            --target-deployment-id "$PREVIOUS_DEPLOYMENT" \
            --wait-for-rollback
        else
          echo "No previous stable deployment found for rollback"
          exit 1
        fi
        
    - name: Verify rollback
      env:
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      run: |
        # Verify the rollback was successful
        sleep 30  # Wait for rollback to complete
        pytest tests/integration/test_langgraph_studio.py::TestLangGraphStudioIntegration::test_deployment_health_monitoring -v

  notify-deployment-status:
    runs-on: ubuntu-latest
    needs: [deploy-to-staging, deploy-to-production, rollback-on-failure]
    if: always()
    
    steps:
    - name: Notify deployment status
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Determine overall status
        if [ "${{ needs.deploy-to-production.result }}" == "success" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        elif [ "${{ needs.rollback-on-failure.result }}" == "success" ]; then
          STATUS="⚠️ ROLLED BACK"
          COLOR="warning"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        MESSAGE="Log Analyzer Agent Deployment: $STATUS
        
        Environment: ${{ github.event.inputs.environment || 'production' }}
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}
        
        Staging: ${{ needs.deploy-to-staging.result }}
        Production: ${{ needs.deploy-to-production.result }}
        "
        
        # Send Slack notification if webhook is configured
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\", \"color\":\"$COLOR\"}" \
            $SLACK_WEBHOOK_URL
        fi
        
        # Send Discord notification if webhook is configured
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"content\":\"$MESSAGE\"}" \
            $DISCORD_WEBHOOK_URL
        fi